server.port=8730
server.servlet.context-path=/mq

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

#数据源配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot?serverTimezone=UTC&useUnicode=true&zeroDateTimeBehavior=convertToNull&autoReconnect=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 初始化大小、最小、最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

#mybatis
mybatis.mapper-locations= classpath:mapper/*Mapper.xml
mybatis.type-aliases-package= com.jvli.project.entity
#showSql
logging.level.com.jvli.project.mapper= debug
  

#rabbitmq配置
spring.rabbitmq.virtual-host=/
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#spring.rabbitmq.listener.simple.concurrency=10
#spring.rabbitmq.listener.simple.max-concurrency=20
#spring.rabbitmq.listener.simple.prefetch=5

spring.rabbitmq.listener.concurrency=10
spring.rabbitmq.listener.max-concurrency=20
spring.rabbitmq.listener.prefetch=5

#spring.rabbitmq.listener.acknowledge-mode=manual

mq.env=local

basic.info.mq.exchange.name=${mq.env}:basic:info:mq:exchange
basic.info.mq.routing.key.name=${mq.env}:basic:info:mq:routing:key
basic.info.mq.queue.name=${mq.env}:basic:info:mq:queue

product.robbing.mq.exchange.name=${mq.env}:product:robbing:mq:exchange
product.robbing.mq.routing.key.name=${mq.env}:product:robbing:mq:routing:key
product.robbing.mq.queue.name=${mq.env}:product:robbing:mq:queue

simple.mq.queue.name=${mq.env}.simple.mq.queue
simple.mq.exchange.name=${mq.env}.simple.mq.exchange
simple.mq.routing.key.name=${mq.env}.simple.mq.routing.key

user.order.queue.name=${mq.env}.user.order.queue
user.order.exchange.name=${mq.env}.user.order.exchange
user.order.routing.key.name=${mq.env}.user.order.routing.key

log.system.queue.name=${mq.env}.log.system.queue
log.system.exchange.name=${mq.env}.log.system.exchange
log.system.routing.key.name=${mq.env}.log.system.routing.key


log.user.queue.name=${mq.env}.log.user.queue
log.user.exchange.name=${mq.env}.log.user.exchange
log.user.routing.key.name=${mq.env}.log.user.routing.key


mail.queue.name=${mq.env}.mail.queue
mail.exchange.name=${mq.env}.mail.exchange
mail.routing.key.name=${mq.env}.mail.routing.key


simple.dead.queue.name=${mq.env}.simple.dead.queue
simple.dead.exchange.name=${mq.env}.simple.dead.exchange
simple.dead.routing.key.name=${mq.env}.simple.dead.routing.key

simple.produce.exchange.name=${mq.env}.simple.produce.exchange
simple.produce.routing.key.name=${mq.env}.simple.produce.routing.key
simple.dead.real.queue.name=${mq.env}.simple.dead.real.queue

user.order.dead.queue.name=${mq.env}.user.order.dead.queue
user.order.dead.exchange.name=${mq.env}.user.order.dead.exchange
user.order.dead.routing.key.name=${mq.env}.user.order.dead.routing.key

user.order.dead.produce.exchange.name=${mq.env}.user.order.dead.produce.exchange
user.order.dead.produce.routing.key.name=${mq.env}.user.order.dead.produce.routing.key
user.order.dead.real.queue.name=${mq.env}.user.order.dead.real.queue



dynamic.dead.queue.name=${mq.env}.dynamic.dead.queue
dynamic.dead.exchange.name=${mq.env}.dynamic.dead.exchange
dynamic.dead.routing.key.name=${mq.env}.dynamic.dead.routing.key

dynamic.dead.produce.exchange.name=${mq.env}.dynamic.dead.produce.exchange
dynamic.dead.produce.routing.key.name=${mq.env}.dynamic.dead.produce.routing.key
dynamic.dead.real.queue.name=${mq.env}.dynamic.dead.real.queue

#rabbitmq


#邮件配置
spring.boot.mail.properties.host=smtp.163.com
spring.boot.mail.properties.port=465
spring.boot.mail.properties.userName=luhongjun8915@163.com
spring.boot.mail.properties.password=
spring.boot.mail.properties.protocol=smtp
spring.boot.mail.properties.needAuth=true
spring.boot.mail.properties.sslClass=javax.net.ssl.SSLSocketFactory

mail.from=luhongjun8915@163.com
mail.to=2451960856@qq.com
mail.by=2451960856@qq.com
mail.subject=这是SpringBoot整合Rabbitmq的邮件
mail.content=您好，这是RabbitMQ实战系列第二阶段的内容-用于注册时异步发送邮件进行邮箱验证!

#将参数配置赋值给bean
website.ip=192.168.10.112
website.port=8725
website.name=catlina.com

